---
const { global } = Astro.props;
---

<div
    x-data="{ isGloballyLoaded: false }"
    x-id="['context']"
    x-init={ global ? `
        setTimeout(() => {
            isGloballyLoaded = true

            if ($el.getBoundingClientRect().top <= window.innerHeight) {
                const contextStack = document.getElementById('global-context-stack')

                if (! contextStack) {
                    return
                }

                const context = $el.querySelector('#' + $id('context'))

                if (! context) {
                    return
                }

                const container = document.createElement('div')
                container.classList.add('context-container')
                window.autoAnimate(container)
                contextStack.appendChild(container)
                container.appendChild(context)
            }
        }, 500)
    ` : `
        setTimeout(() => {
            if ($el.getBoundingClientRect().top <= window.innerHeight) {
                const lowestContextClear = Array.from(document.querySelectorAll('.context-clear'))
                    .findLast((contextClear) => contextClear.getBoundingClientRect().top < window.innerHeight)

                if (
                    (lowestContextClear) &&
                    ($el.getBoundingClientRect().top < lowestContextClear.getBoundingClientRect().top)
                ) {
                    return
                }

                const contextStack = document.getElementById('local-context-stack')

                if (! contextStack) {
                    return
                }

                const context = $el.querySelector('#' + $id('context'))

                if (! context) {
                    return
                }

                const container = document.createElement('div')
                container.classList.add('context-container')
                window.autoAnimate(container)
                contextStack.appendChild(container)
                container.appendChild(context)
            }
        }, 500)
    ` }
    x-intersect:enter={ global ? `
        if (! isGloballyLoaded) {
            return
        }

        const contextStack = document.getElementById('global-context-stack')

        if (! contextStack) {
            return
        }

        const context = $el.querySelector('#' + $id('context'))

        if (! context) {
            return
        }

        const container = document.createElement('div')
        container.classList.add('context-container')
        window.autoAnimate(container)
        contextStack.appendChild(container)
        container.appendChild(context)
    ` : `
        const contextStack = document.getElementById('local-context-stack')

        if (! contextStack) {
            return
        }

        const context = $el.querySelector('#' + $id('context'))

        if (! context) {
            return
        }

        const container = document.createElement('div')
        container.classList.add('context-container')
        window.autoAnimate(container)
        contextStack.appendChild(container)
        container.appendChild(context)
    ` }
    x-intersect:leave="
        if ($el.getBoundingClientRect().top > 0) {
            const context = document.getElementById($id('context'))

            $el.appendChild(context)
            document.getElementById('context-stack').querySelectorAll('.context-container').forEach((container) => {
                if (container.children.length) {
                    return
                }

                container.remove()
            })
        }
    "
    class={ `h-0 overflow-hidden invisible ${global ? 'pending-global-context' : 'pending-local-context'}` }
>
    <ul
        x-bind:id="$id('context')"
        class={ `context mt-1 ${global ? 'global-context' : 'local-context'} grid gap-1` }
    >
        <slot />
    </ul>
</div>

